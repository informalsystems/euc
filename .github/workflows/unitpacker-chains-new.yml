# Required secrets in GitHub:
###
###
# MAC_APP_CERTIFICATE - Developer ID Application certificate, private key and CA certificate.
# Export these three items from your Mac's local keystore:
# * Your (encrypted) private key corresponding to your Developer ID Application certificate
# * Your Apple Developer ID Application Certificate
# * Apple's "Developer ID Certification Authority" root certificate.
# Base64-encode the resulting p12 file and paste the string in this secret.
# The Application signing identity is used to sign individual files.
###
# MAC_APP_CERTIFICATE_PASSPHRASE - passphrase for the MAC_APP_CERTIFICATE private key
# The passphrase that you used to encrypt your private key during the export.
###
###
# MAC_INST_CERTIFICATE - Developer ID Installer certificate and private key.
# Export these two items from your Mac's local keystore:
# * Your (encrypted) private key corresponding to your Developer ID Installer certificate
# * Your Apple Developer ID Installer Certificate
# Base64-encode the resulting p12 file and paste the string in this secret.
# The Installer signing identity is used to sign packages.
###
# MAC_INST_CERTIFICATE_PASSPHRASE - passphrase for the MAC_INST_CERTIFICATE private key
# The passphrase that you used to encrypt your private key during the export.
###
###
# MAC_STORE_KEY - App Store Connect API private key for notarizing
###
###
# GPG_PRIVATE_KEY - PGP private key block for Linux signing
# GPG_PASSPHRASE - passphrase for the GPG_PRIVATE_KEY
##

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
# > Note: An event will not be created when you push more than three tags at once.

name: unitpacker-chains
on:
  push:
    tags:
      - "*-x*"
      - "!cosmos-x*"
      - "!multisig-x*"
      - "!hermes-x*"

permissions:
      contents: write

jobs:

  config:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.set-config.outputs.config }}
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.INFORMAL_BOT_SSH_PRIVATE_KEY }}
      - id: set-config
        run: |
          if [ -n "${ACT+x}" ]; then
            ./compile-unitpacker-config-new.sh gaiad-v99.0.1
          else
            ./compile-unitpacker-config-new.sh "$GITHUB_REF_NAME"
          fi

  config-test:
    needs: config
    strategy:
      matrix: ${{fromJSON(needs.config.outputs.config)}}
    runs-on: ${{matrix.os}}
    steps:
      - run: |
          echo "hello world"
          echo "Chain name: ${{matrix.network.chain_name}}"
          echo "Daemon name: ${{matrix.network.daemon_name}}"
          echo "Git repo: ${{matrix.network.codebase.git_repo}}"
          echo "Recommended version: ${{matrix.network.codebase.recommended_version}}"

  build:
    needs: config
    strategy:
      matrix: ${{ fromJSON(needs.config.outputs.config) }}
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: '=1.19.8'

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.INFORMAL_BOT_SSH_PRIVATE_KEY }}

      - uses: apple-actions/import-codesign-certs@v1
        if: runner.os == 'macOS'
        id: keychain
        with:
          p12-file-base64: ${{ secrets.MAC_APP_CERTIFICATE }}
          p12-password: ${{ secrets.MAC_APP_CERTIFICATE_PASSPHRASE }}

      - uses: apple-actions/import-codesign-certs@v1
        if: runner.os == 'macOS'
        with:
          p12-file-base64: ${{ secrets.MAC_INST_CERTIFICATE }}
          p12-password: ${{ secrets.MAC_INST_CERTIFICATE_PASSPHRASE }}
          create-keychain: false
          keychain-password: ${{ steps.keychain.outputs.keychain-password }}

      - uses: lukasa1993/secret-file-action@v1.0.4
        if: runner.os == 'macOS'
        id: private-key-file
        with:
          secret: ${{ secrets.MAC_STORE_KEY }}
          b64-decode: false

      - name: Build binary
        if: runner.os == 'macOS'
        env:
          MAC_STORE_KEY: ${{ steps.private-key-file.outputs.file }}
        run: |
          scripts/darwin-build.sh git@github.com:${{ matrix.network.codebase.git_repo }} ${{ matrix.network.codebase.recommended_version }} ${{matrix.network.daemon_name}}
          scripts/darwin-package.sh ${{matrix.network.daemon_name}} ${{ matrix.network.codebase.recommended_version }}
          scripts/darwin-notarize.sh ${{matrix.network.daemon_name}}_${{ matrix.network.codebase.recommended_version }}_mac.pkg

      - uses: crazy-max/ghaction-import-gpg@v5
        if: runner.os == 'Linux'
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build binary
        if: runner.os == 'Linux'
        run: |
          scripts/build.sh git@github.com:${{ matrix.network.codebase.git_repo }} ${{ matrix.network.codebase.recommended_version }} ${{matrix.network.daemon_name}}
          scripts/linux-package.sh ${{matrix.network.daemon_name}} ${{ matrix.network.codebase.recommended_version }}

      - uses: actions/upload-artifact@v3
        if: runner.os == 'macOS'
        with:
          name: ${{ github.run_id }}.${{ matrix.os }}
          if-no-files-found: error
          retention-days: 3
          path: |
            ${{matrix.network.daemon_name}}_${{ matrix.network.codebase.recommended_version }}_mac.pkg

      - uses: actions/upload-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: ${{ github.run_id }}.${{ matrix.os }}
          if-no-files-found: error
          retention-days: 3
          path: |
            ${{matrix.network.daemon_name}}_${{ matrix.network.codebase.recommended_version }}_linux.zip
            ${{matrix.network.daemon_name}}_${{ matrix.network.codebase.recommended_version }}_linux.zip.asc

  release:
    needs:
      - config
      - build
    runs-on: ubuntu-latest
    
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}.${{ fromJSON(needs.config.outputs.config).os[0] }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}.${{ fromJSON(needs.config.outputs.config).os[1] }}

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            ${{ fromJSON(needs.config.outputs.config).network[0].daemon_name }}_${{ fromJSON(needs.config.outputs.config).network[0].codebase.recommended_version }}_mac.pkg
            ${{ fromJSON(needs.config.outputs.config).network[0].daemon_name }}_${{ fromJSON(needs.config.outputs.config).network[0].codebase.recommended_version }}_linux.zip
            ${{ fromJSON(needs.config.outputs.config).network[0].daemon_name }}_${{ fromJSON(needs.config.outputs.config).network[0].codebase.recommended_version }}_linux.zip.asc
